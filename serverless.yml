service: pizzApp

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: us-east-1
  environment:
    REGION: ${self:provider.region}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            Fn::GetAtt: [ProcessingOrderQueue, Arn]
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            Fn::GetAtt: [OrdersToSendQueue, Arn]
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource:
            Fn::GetAtt: [OrdersTable, Arn]
  versionFunctions: true

functions:
  newOrder:
    handler: handler.newOrder
    url: true
    environment:
      PENDING_ORDERS_QUEUE:
        Ref: ProcessingOrderQueue
      ORDERS_TABLE:
        Ref: OrdersTable
    events:
      - httpApi:
          path: /order
          method: post

  getOrder:
    handler: handler.getOrder
    events:
      - httpApi:
          path: /order/{orderId}
          method: get

  prepareOrder:
    handler: handler.prepareOrder
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ProcessingOrderQueue, Arn]
          batchSize: 1
  sendOrder:
    handler: handler.sendOrder
    environment:
      ORDERS_TO_SEND_QUEUE:
        Ref: OrdersToSendQueue
resources:
  Resources:
    ProcessingOrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-processingOrderQueue
    OrdersToSendQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-ordersToSendQueue
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Orders
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
